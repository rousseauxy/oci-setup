###################################
# ðŸ¦Ž KOMODO COMPOSE - POSTGRES ðŸ¦Ž #
###################################

## This compose file will deploy:
##   1. Postgres + FerretDB Mongo adapter (https://www.ferretdb.com)
##   2. Komodo Core
##   3. Komodo Periphery
networks:
  komodo-internal:
    internal: true

services:
  postgres:
    image: postgres:17
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - komodo-internal
    # ports:
    #   - 5432:5432
    volumes:
      - ${DOCKERDIR}/appdata/komodo/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${KOMODO_DB_USERNAME}
      - POSTGRES_PASSWORD=${KOMODO_DB_PASSWORD}
      - POSTGRES_DB=${KOMODO_DATABASE_DB_NAME:-komodo}
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers

  ferretdb:
    image: ghcr.io/ferretdb/ferretdb:1
    restart: unless-stopped
    depends_on:
      - postgres
    logging:
      driver: local
    networks:
      - komodo-internal
    # ports:
    #   - 27017:27017
    environment:
      - FERRETDB_POSTGRESQL_URL=postgres://postgres:5432/${KOMODO_DATABASE_DB_NAME:-komodo}
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
  
  core:
    image: ghcr.io/mbecker20/komodo:latest
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.komodo-rtr.entrypoints=websecure"
      - "traefik.http.routers.komodo-rtr.rule=Host(`komodo.${DOMAINNAME}`)"
      # Middlewares
      - "traefik.http.routers.komodo-rtr.middlewares=chain-no-auth@file"
      # HTTP Services
      - "traefik.http.routers.komodo-rtr.service=komodo-svc"
      - "traefik.http.services.komodo-svc.loadbalancer.server.port=9120"
    restart: unless-stopped
    depends_on:
      - ferretdb
    logging:
      driver: local
    networks:
      - t3_proxy
      - komodo-internal
    # ports:
    #  - 9120:9120
    expose:
      - 9120
    env_file: ${DOCKERDIR}/secrets/komodo.env
    environment:
      KOMODO_DATABASE_URI: mongodb://${KOMODO_DB_USERNAME}:${KOMODO_DB_PASSWORD}@ferretdb:27017/${KOMODO_DATABASE_DB_NAME:-komodo}?authMechanism=PLAIN
    volumes:
      ## Core cache for repos for latest commit hash / contents
      - ${DOCKERDIR}/appdata/komodo/data:/repo-cache
      ## Store sync files on server
      # - /path/to/syncs:/syncs
      ## Optionally mount a custom core.config.toml
      # - /path/to/core.config.toml:/config/config.toml
    ## Allows for systemd Periphery connection at 
    ## "http://host.docker.internal:8120"
    # extra_hosts:
    #   - host.docker.internal:host-gateway

  ## Deploy Periphery container using this block,
  ## or deploy the Periphery binary with systemd using 
  ## https://github.com/mbecker20/komodo/tree/main/scripts
  periphery:
    image: ghcr.io/mbecker20/periphery:latest
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
    restart: unless-stopped
    logging:
      driver: ${COMPOSE_LOGGING_DRIVER:-local}
    networks:
      - t3_proxy
      - komodo-internal
    env_file: ${DOCKERDIR}/secrets/komodo.env
    environment:
      PERIPHERY_REPO_DIR: /etc/komodo/repos
      PERIPHERY_STACK_DIR: /etc/komodo/stacks
      PERIPHERY_SSL_KEY_FILE: /etc/komodo/ssl/key.pem
      PERIPHERY_SSL_CERT_FILE: /etc/komodo/ssl/cert.pem
    volumes:
      ## Mount external docker socket
      - /var/run/docker.sock:/var/run/docker.sock
      ## Allow Periphery to see processes outside of container
      - /proc:/proc
      ## Specify the Periphery agent root directory.
      ## Must be the same inside and outside the container,
      ## or docker will get confused. See https://github.com/mbecker20/komodo/discussions/180.
      ## Default: /etc/komodo.
      - ${DOCKERDIR}/appdata/komodo/data:/etc/komodo